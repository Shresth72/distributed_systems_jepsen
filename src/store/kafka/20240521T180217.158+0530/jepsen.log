2024-05-21 18:02:17,197{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 95b6ac5939d01d7f9cf89fa23a5158b4ccc688c8 (plus uncommitted changes)
2024-05-21 18:02:17,198{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w kafka --bin target/debug/kafka_log --node-count 2 --concurrency 2n --time-limit 20 --rate 1000
2024-05-21 18:02:17,389{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 2
 :availability nil
 :max-txn-length 4
 :concurrency 4
 :db
 #object[maelstrom.db$db$reify__16142
         "0x50a1c2f3"
         "maelstrom.db$db$reify__16142@50a1c2f3"]
 :max-writes-per-key 16
 :leave-db-running? false
 :sub-via #{:assign}
 :name "kafka"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x333813e7" "2024-05-21T18:02:17.158+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x292237cd"
         "maelstrom.net$jepsen_net$reify__15251@292237cd"]
 :client
 #maelstrom.workload.kafka.Client{:net #object[clojure.lang.Atom
                                               "0x5827908c"
                                               {:status :ready,
                                                :val {:p-loss 0,
                                                      :latency-dist #maelstrom.net.ConstantDistribution{:x 0},
                                                      :journal nil,
                                                      :log-recv? false,
                                                      :partitions {},
                                                      :log-send? false,
                                                      :next-client-id -1,
                                                      :next-message-id #object[clojure.lang.Atom
                                                                               "0x732ffb6a"
                                                                               {:status :ready,
                                                                                :val -1}],
                                                      :queues {}}}],
                                  :conn nil,
                                  :node nil,
                                  :offsets nil}
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5ed83e36"
         "java.util.concurrent.CyclicBarrier@5ed83e36"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :txn? false
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x2459715c"
         "jepsen.checker$compose$reify__11881@2459715c"]
 :argv
 ("test"
  "-w"
  "kafka"
  "--bin"
  "target/debug/kafka_log"
  "--node-count"
  "2"
  "--concurrency"
  "2n"
  "--time-limit"
  "20"
  "--rate"
  "1000")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@401e36ab"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@4ce66169"]})
 :nodes ["n0" "n1"]
 :test-count 1
 :crash-clients? true
 :latency {:mean 0, :dist :constant}
 :bin "target/debug/kafka_log"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x76480730"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@76480730"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x405a296e"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@405a296e"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 2000000,
                                  :next-time nil,
                                  :gen (maelstrom.workload.kafka.StringKeys
                                        {:gen (jepsen.generator.Any
                                               {:gens [(jepsen.generator.Stagger
                                                        {:dt 15000000000,
                                                         :next-time nil,
                                                         :gen ({:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               ...)})
                                                       (jepsen.tests.kafka.PollUnseen
                                                        {:gen (jepsen.tests.kafka.InterleaveSubscribes
                                                               {:gen (jepsen.tests.kafka.TrackKeyOffsets
                                                                      {:gen (jepsen.generator.Map
                                                                             {:f #object[jepsen.tests.kafka$tag_rw$tag_rw__18063
                                                                                         "0x383c94ed"
                                                                                         "jepsen.tests.kafka$tag_rw$tag_rw__18063@383c94ed"],
                                                                              :gen (jepsen.generator.Map
                                                                                    {:f #object[jepsen.tests.kafka$txn_generator$rewrite_op__18027
                                                                                                "0x293ccbdd"
                                                                                                "jepsen.tests.kafka$txn_generator$rewrite_op__18027@293ccbdd"],
                                                                                     :gen ({:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     6
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:append
                                                                                                     8
                                                                                                     1]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     8
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:append
                                                                                                     8
                                                                                                     2]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     4
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:append
                                                                                                     9
                                                                                                     1]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     8
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:append
                                                                                                     7
                                                                                                     1]]}
                                                                                           ...)})}),
                                                                       :offsets #object[clojure.lang.Atom
                                                                                        "0xe7b7395"
                                                                                        {:status :ready,
                                                                                         :val {}}]})}),
                                                         :sent {},
                                                         :polled {}})]})})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x1026a011"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1026a011"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x63b95a30"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@63b95a30"],
           :gen (jepsen.generator.TimeLimit
                 {:limit 10000000000,
                  :cutoff nil,
                  :gen (maelstrom.workload.kafka.StringKeys
                        {:gen (jepsen.generator.Filter
                               {:f #object[clojure.core$comp$fn__5876
                                           "0x353aadd7"
                                           "clojure.core$comp$fn__5876@353aadd7"],
                                :gen (jepsen.generator.EachThread
                                      {:fresh-gen #object[clojure.lang.Delay
                                                          "0x39595a8"
                                                          {:status :pending,
                                                           :val nil}],
                                       :context-filters #object[clojure.core$promise$reify__8591
                                                                "0x26169be3"
                                                                {:status :pending,
                                                                 :val nil}],
                                       :gens {}})})})})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x6f3f2340"
         "maelstrom.net$jepsen_os$reify__15254@6f3f2340"]
 :time-limit 20
 :workload :kafka
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-05-21 18:02:22,329{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-05-21 18:02:22,331{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-05-21 18:02:22,334{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-05-21 18:02:22,336{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-05-21 18:02:22,336{GMT}	INFO	[jepsen node n1] maelstrom.process: launching target/debug/kafka_log []
2024-05-21 18:02:22,338{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-05-21 18:02:22,343{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-05-21 18:02:22,344{GMT}	INFO	[jepsen node n0] maelstrom.process: launching target/debug/kafka_log []
2024-05-21 18:02:23,353{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-05-21 18:02:23,364{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
java.io.IOException: Cannot run program "/home/shrestha/rust/distributed_systems/src/target/debug/kafka_log" (in directory "/tmp"): error=2, No such file or directory
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1143)
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1073)
	at maelstrom.process$start_node_BANG_.invokeStatic(process.clj:199)
	at maelstrom.process$start_node_BANG_.invoke(process.clj:168)
	at maelstrom.db$db$reify__16142.setup_BANG_(db.clj:34)
	at jepsen.db$fn__8729$G__8723__8733.invoke(db.clj:12)
	at jepsen.db$fn__8729$G__8722__8738.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.base/java.lang.ProcessImpl.forkAndExec(Native Method)
	at java.base/java.lang.ProcessImpl.<init>(ProcessImpl.java:314)
	at java.base/java.lang.ProcessImpl.start(ProcessImpl.java:244)
	at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1110)
	... 31 common frames omitted
